[project]
name = "pgrubic-playground-backend"
version = "0.1.0"
description = "Backend for pgrubic playground."
readme = { file = "README.md", content-type = "text/markdown" }
license = "MIT"
license-files = ["LICENSE"]
requires-python = ">=3.12"

dynamic = ["dependencies"]
[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}

[project.optional-dependencies]
dev = [
  "ruff==0.11.13",
  "mypy==1.16.0",
  "isort==6.0.1",
  "bandit==1.8.3",
  "add-trailing-comma==3.2.0",
  "interrogate==1.7.0",
  "pre-commit==4.2.0",
  "pre-commit-hooks==5.0.0",
  "yamllint==1.37.1",
  "conventional-pre-commit==4.2.0",
  "pytest==8.4.0",
  "coverage==7.8.2",
  "tox==4.26.0",
  "httpx==0.28.1",
  "types-toml==0.10.8.20240310",
]

[tool.bandit]
exclude_dirs = [
  "tests"
]

[tool.mypy]
python_version = "3.12"
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
strict = true
strict_equality = true
extra_checks = true
show_error_codes = true
no_implicit_reexport = true
disallow_untyped_decorators = false
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
  "models.*",
  "config.*",
  "infrastructure.*",
  "api.*",
  "diskcache.*",
  "app.*"
]
ignore_missing_imports = true

[tool.ruff]
lint.select = ["ALL"]
line-length = 90

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
length-sort = true

[tool.ruff.lint.per-file-ignores]
"**/tests/**/*.py" = [
  "S101", # asserts allowed in tests...
  "PLR2004", # magic value used in comparison
]

[tool.isort]
profile = "black"
length_sort = true

[tool.pytest.ini_options]
pythonpath = ["app"]

[tool.coverage.run]
relative_files = true
source = ["app"]
omit = [
  "tests/*"
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
]

[tool.interrogate]
fail-under = 100
verbose = 1

[tool.tox]
legacy_tox_ini = """
    [tox]
    workdir = {toxinidir}/.tox
    min_version = 4.0
    env_list =
        isort
        lint
        format
        format
        typing
        tests
        coverage
        docstrings-coverage

    [testenv]
    extras = dev
    deps =
    commands =

    [testenv:dev]
    extras = dev

    [testenv:commitlint]
    commands = conventional-pre-commit .git/COMMIT_EDITMSG

    [testenv:tests]
    setenv = {[testenv:coverage]setenv}
    commands =
        coverage erase
        coverage run -m pytest -vv --color=yes {posargs:tests}

    [testenv:coverage]
    setenv =
        COVERAGE_FILE = .coverage
    commands =
        {[testenv:tests]commands}
        coverage report --fail-under=100 --show-missing {posargs}

    [testenv:docstrings-coverage]
    commands = interrogate {posargs}

    [testenv:isort]
    commands = isort --check --diff --profile=black {posargs:.}

    [testenv:lint]
    allowlist_externals = which
    commands =
        ruff check {posargs}
        yamllint --strict {posargs:.}

    [testenv:format]
    commands = ruff format {posargs}

    [testenv:typing]
    commands = mypy {posargs:.}

    [testenv:security]
    commands = bandit --severity-level all -r src

    [testenv:pre-commit]
    commands = pre-commit {posargs:run --hook-stage pre-commit --all-files}
"""
